class MyCircularQueue {
    int front = -1;
    int rear = -1;
    int *arr;
    int k;
public:
    MyCircularQueue(int a) {
        arr = new int[a];
        k = a;
    }
    
    bool enQueue(int value) {
        if(isFull())
        {
            return false;
        }
        else if(rear == -1)
        {
            front += 1;
        }
        rear = (rear + 1) % k;
        arr[rear] = value;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty())
        {
            return false;
        }
        else if(front == rear)
        {
            rear = -1;
            front = -1;
        }
        else
            front = (front + 1) % k;
        return true;
    }
    
    int Front() {
        if(isEmpty())
            return -1;
        return arr[front];
    }
    
    int Rear() {
        if(isEmpty())
            return -1;
        return arr[rear];
    }
    
    bool isEmpty() {
        return (front == -1);
    }
    
    bool isFull() {
        return ((rear == k - 1 && front == 0) || front == rear + 1);
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
